import logging
import os
import random

import streamlit as st
from countryinfo import CountryInfo
from dotenv import load_dotenv

from common import HintType, configs, get_distance
from hint import AudioHint, ImageHint, TextHint


@st.cache_resource()
def setup_text_hint(configs: dict) -> TextHint:
    with st.spinner("Loading text model..."):
        configs["hf_access_token"] = os.environ["HF_ACCESS_TOKEN"]
        textHint = TextHint(configs=configs)
        textHint.initialize()
    return textHint


@st.cache_resource()
def setup_image_hint(configs: dict) -> ImageHint:
    with st.spinner("Loading image model..."):
        imageHint = ImageHint(configs=configs)
        imageHint.initialize()
    return imageHint


@st.cache_resource()
def setup_audio_hint(configs: dict) -> AudioHint:
    with st.spinner("Loading audio model..."):
        audioHint = AudioHint(configs=configs)
        audioHint.initialize()
    return audioHint


@st.cache_resource()
def get_country_list() -> list[str]:
    country_list = list(CountryInfo().all().keys())
    return country_list


def pick_country(country_list) -> str:
    country = random.choice(country_list)
    return country


def reset_cache() -> None:
    st.session_state["country"] = ""
    st.session_state["hint_types"] = []
    st.session_state["n_hints"] = 1
    st.session_state["game_started"] = False
    st.session_state["model"] = {
        HintType.TEXT.value: None,
        HintType.IMAGE.value: None,
        HintType.AUDIO.value: None,
    }


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

st.set_page_config(
    page_title="Gen AI GeoGuesser",
    page_icon="ðŸŒŽ",
)

load_dotenv()
country_list = get_country_list()

if not st.session_state:
    reset_cache()

st.title("Generative AI GeoGuesser ðŸŒŽ")

st.markdown("### Guess the country based on hints generated by AI")

col1, col2 = st.columns([2, 1])

with col1:
    st.session_state["hint_types"] = st.multiselect(
        "Chose which hint types you want",
        [x.value for x in HintType],
        default=st.session_state["hint_types"],
    )

with col2:
    st.session_state["n_hints"] = st.slider(
        "Number of hints",
        min_value=1,
        max_value=5,
        value=st.session_state["n_hints"],
    )

start_btn = st.button("Start game")

if start_btn:
    if not st.session_state["hint_types"]:
        st.error("Pick at least one hint type")
        reset_cache()
    else:
        st.session_state["country"] = pick_country(country_list)
        print(f'Chosen country "{st.session_state["country"]}"')

        for hint_type in st.session_state["hint_types"]:
            if st.session_state["model"][hint_type] is None:
                if hint_type == HintType.TEXT.value:
                    st.session_state["model"][hint_type] = setup_text_hint(
                        configs["local"][hint_type.lower()]
                    )
                elif hint_type == HintType.IMAGE.value:
                    st.session_state["model"][hint_type] = setup_image_hint(
                        configs["local"][hint_type.lower()]
                    )
                elif hint_type == HintType.AUDIO.value:
                    st.session_state["model"][hint_type] = setup_audio_hint(
                        configs["local"][hint_type.lower()]
                    )

            with st.spinner(f"Generating {hint_type} hint..."):
                st.session_state["model"][hint_type].generate_hint(
                    st.session_state["country"],
                    st.session_state["n_hints"],
                )

        st.session_state["game_started"] = True

if st.session_state["game_started"]:
    game_col1, game_col2, game_col3 = st.columns([2, 1, 1])

    with game_col1:
        guess = st.selectbox("Country guess", ([""] + country_list))
    with game_col2:
        guess_btn = st.button("Make a guess")
    with game_col3:
        reset_btn = st.button("Reset game")

    if guess_btn:
        if st.session_state["country"] == guess:
            st.success("Correct guess you won!")
            st.balloons()
        else:
            if guess:
                country_latlong = CountryInfo(st.session_state["country"]).latlng()
                guess_latlong = CountryInfo(guess).latlng()
                distance = int(get_distance(country_latlong, guess_latlong))
                st.error(
                    f"Wrong guess, you missed the correct country by {distance} KM."
                )
            else:
                st.error("Pick a country.")

    if reset_btn:
        reset_cache()

if st.session_state["game_started"]:
    tabs = st.tabs([f"{x} hint" for x in st.session_state["hint_types"]])

    for tab_idx, tab in enumerate(tabs):
        hint_type = st.session_state["hint_types"][tab_idx]
        with tab:
            if st.session_state["model"][hint_type]:
                for hint_idx, hint in enumerate(
                    st.session_state["model"][hint_type].hints
                ):
                    st.markdown(f"#### Hint #{hint_idx+1}")
                    if hint_type == HintType.TEXT.value:
                        st.write(hint["text"])
                    elif hint_type == HintType.IMAGE.value:
                        st.image(hint["image"])
                    elif hint_type == HintType.AUDIO.value:
                        st.audio(hint["audio"], sample_rate=hint["sample_rate"])
